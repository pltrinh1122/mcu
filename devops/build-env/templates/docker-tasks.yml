version: '3'

# Docker-specific tasks for container management and orchestration
# These tasks handle Docker images, containers, and multi-container setups

tasks:
  docker-build:
    desc: "Docker build - builds Docker image with proper tagging"
    cmds:
      - echo "Building Docker image..."
      - |
        if [ -f "docker/Dockerfile" ]; then
          docker build -f docker/Dockerfile \
            -t {{.IMAGE_NAME:-app}}:{{.IMAGE_TAG:-latest}} \
            -t {{.IMAGE_NAME:-app}}:{{.IMAGE_TAG:-latest}}-{{.BUILD_DATE}} \
            .
        else
          echo "No docker/Dockerfile found"
        fi
      - echo "Docker build completed!"

  docker-build-dev:
    desc: "Docker build dev - builds development Docker image"
    cmds:
      - echo "Building development Docker image..."
      - |
        if [ -f "docker/Dockerfile.dev" ]; then
          docker build -f docker/Dockerfile.dev \
            -t {{.IMAGE_NAME:-app}}:dev \
            -t {{.IMAGE_NAME:-app}}:dev-{{.BUILD_DATE}} \
            .
        else
          echo "No docker/Dockerfile.dev found"
        fi
      - echo "Development Docker build completed!"

  docker-run:
    desc: "Docker run - runs Docker container with proper configuration"
    cmds:
      - echo "Running Docker container..."
      - |
        if [ -f "docker/docker-compose.yml" ]; then
          docker-compose -f docker/docker-compose.yml up -d
        else
          echo "No docker/docker-compose.yml found"
        fi
      - echo "Docker container started!"

  docker-run-dev:
    desc: "Docker run dev - runs development Docker container"
    cmds:
      - echo "Running development Docker container..."
      - |
        if [ -f "docker/docker-compose.dev.yml" ]; then
          docker-compose -f docker/docker-compose.dev.yml up -d
        else
          echo "No docker/docker-compose.dev.yml found"
        fi
      - echo "Development Docker container started!"

  docker-stop:
    desc: "Docker stop - stops Docker container"
    cmds:
      - echo "Stopping Docker container..."
      - |
        if [ -f "docker/docker-compose.yml" ]; then
          docker-compose -f docker/docker-compose.yml down
        else
          echo "No docker/docker-compose.yml found"
        fi
      - echo "Docker container stopped!"

  docker-stop-dev:
    desc: "Docker stop dev - stops development Docker container"
    cmds:
      - echo "Stopping development Docker container..."
      - |
        if [ -f "docker/docker-compose.dev.yml" ]; then
          docker-compose -f docker/docker-compose.dev.yml down
        else
          echo "No docker/docker-compose.dev.yml found"
        fi
      - echo "Development Docker container stopped!"

  docker-logs:
    desc: "Docker logs - shows Docker container logs"
    cmds:
      - echo "Showing Docker container logs..."
      - |
        if [ -f "docker/docker-compose.yml" ]; then
          docker-compose -f docker/docker-compose.yml logs -f
        else
          echo "No docker-compose.yml found"
        fi

  docker-logs-dev:
    desc: "Docker logs dev - shows development Docker container logs"
    cmds:
      - echo "Showing development Docker container logs..."
      - |
        if [ -f "docker/docker-compose.dev.yml" ]; then
          docker-compose -f docker/docker-compose.dev.yml logs -f
        else
          echo "No docker-compose.dev.yml found"
        fi

  docker-exec:
    desc: "Docker exec - executes command in running container"
    cmds:
      - echo "Executing command in Docker container..."
      - |
        if [ -n "{{.CONTAINER_NAME}}" ] && [ -n "{{.COMMAND}}" ]; then
          docker exec -it {{.CONTAINER_NAME}} {{.COMMAND}}
        else
          echo "CONTAINER_NAME and COMMAND must be specified"
        fi

  docker-shell:
    desc: "Docker shell - opens shell in running container"
    cmds:
      - echo "Opening shell in Docker container..."
      - |
        if [ -n "{{.CONTAINER_NAME}}" ]; then
          docker exec -it {{.CONTAINER_NAME}} /bin/bash
        else
          echo "CONTAINER_NAME must be specified"
        fi

  docker-clean:
    desc: "Docker clean - removes Docker images and containers"
    cmds:
      - echo "Cleaning Docker resources..."
      - docker system prune -f
      - docker image prune -f
      - docker container prune -f
      - echo "Docker cleanup completed!"

  docker-clean-all:
    desc: "Docker clean all - removes all Docker resources"
    cmds:
      - echo "Cleaning all Docker resources..."
      - docker system prune -a -f
      - docker volume prune -f
      - docker network prune -f
      - echo "All Docker resources cleaned!"

  docker-push:
    desc: "Docker push - pushes Docker image to registry"
    cmds:
      - echo "Pushing Docker image to registry..."
      - |
        if [ -n "{{.REGISTRY}}" ] && [ -n "{{.IMAGE_NAME}}" ]; then
          docker tag {{.IMAGE_NAME}}:{{.IMAGE_TAG:-latest}} {{.REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG:-latest}}
          docker push {{.REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG:-latest}}
        else
          echo "REGISTRY and IMAGE_NAME must be specified"
        fi
      - echo "Docker push completed!"

  docker-pull:
    desc: "Docker pull - pulls Docker image from registry"
    cmds:
      - echo "Pulling Docker image from registry..."
      - |
        if [ -n "{{.REGISTRY}}" ] && [ -n "{{.IMAGE_NAME}}" ]; then
          docker pull {{.REGISTRY}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG:-latest}}
        else
          echo "REGISTRY and IMAGE_NAME must be specified"
        fi
      - echo "Docker pull completed!"

  docker-inspect:
    desc: "Docker inspect - inspects Docker container or image"
    cmds:
      - echo "Inspecting Docker resource..."
      - |
        if [ -n "{{.RESOURCE_NAME}}" ]; then
          docker inspect {{.RESOURCE_NAME}}
        else
          echo "RESOURCE_NAME must be specified"
        fi

  docker-stats:
    desc: "Docker stats - shows Docker container statistics"
    cmds:
      - echo "Showing Docker container statistics..."
      - docker stats

  docker-ps:
    desc: "Docker ps - lists running Docker containers"
    cmds:
      - echo "Listing running Docker containers..."
      - docker ps

  docker-images:
    desc: "Docker images - lists Docker images"
    cmds:
      - echo "Listing Docker images..."
      - docker images
